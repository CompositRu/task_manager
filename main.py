import os
import warnings
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Google
os.environ['GRPC_VERBOSITY'] = 'ERROR'
os.environ['GLOG_minloglevel'] = '2'
warnings.filterwarnings('ignore')
logging.getLogger('absl').setLevel(logging.ERROR)

import json
import sqlite3
from datetime import datetime, timedelta, date
# from dateutil import parser
# from dateutil.relativedelta import relativedelta
import re
from dotenv import load_dotenv
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

load_dotenv()

class TaskBot:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API
        self.telegram_token = os.getenv('TELEGRAM_TOKEN')
        genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        self.setup_database()
        
    def setup_database(self):
        self.conn = sqlite3.connect('tasks.db', check_same_thread=False)
        cursor = self.conn.cursor()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –ë–î —Å –ø–æ–ª–µ–º due_date
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                raw_text TEXT,
                title TEXT,
                description TEXT,
                conditions TEXT,
                priority TEXT,
                due_date DATE,
                reminder_time DATETIME,
                status TEXT DEFAULT 'active',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
    
    def process_with_gemini(self, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –¥–∞—Ç"""
        current_date = datetime.now().strftime("%Y-%m-%d")
        current_day = datetime.now().strftime("%A")
        
        prompt = f"""
        –°–µ–≥–æ–¥–Ω—è {current_date} ({current_day}).
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ —Å–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É.
        –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ markdown —Ä–∞–∑–º–µ—Ç–∫–∏:
        {{
            "title": "–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "conditions": ["—É—Å–ª–æ–≤–∏–µ 1", "—É—Å–ª–æ–≤–∏–µ 2"],
            "priority": "high/medium/low",
            "context": ["–¥–æ–º", "—Ä–∞–±–æ—Ç–∞", "–¥–æ—Ä–æ–≥–∞"],
            "due_date": "YYYY-MM-DD –∏–ª–∏ null",
            "has_specific_date": true/false
        }}
        
        –ü—Ä–∞–≤–∏–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞—Ç—ã:
        - –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ (3 –æ–∫—Ç—è–±—Ä—è, 15.11, etc) - —É–∫–∞–∂–∏ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        - –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤—Ç–æ—Ä–Ω–∏–∫, –≤ –ø—è—Ç–Ω–∏—Ü—É) - –≤—ã—á–∏—Å–ª–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
        - –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" - –≤—ã—á–∏—Å–ª–∏ –¥–∞—Ç—É
        - –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–µ—Ç - —É—Å—Ç–∞–Ω–æ–≤–∏ null
        - has_specific_date = true –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è
        
        –¢–µ–∫—Å—Ç: {text}
        """
        
        try:
            response = self.model.generate_content(prompt)
            json_text = response.text.strip()
            if json_text.startswith('```'):
                json_text = json_text.split('```')[1]
                if json_text.startswith('json'):
                    json_text = json_text[4:]
            
            result = json.loads(json_text.strip())
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Python
            if result.get('due_date'):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                    parsed_date = datetime.strptime(result['due_date'], '%Y-%m-%d')
                    result['due_date'] = parsed_date.strftime('%Y-%m-%d')
                except:
                    result['due_date'] = None
                    
            return result
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ Gemini: {e}")
            return {
                "title": text[:50],
                "description": text,
                "conditions": [],
                "priority": "medium",
                "context": [],
                "due_date": None,
                "has_specific_date": False
            }
    
    def save_task(self, user_id, raw_text, structured):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO tasks (user_id, raw_text, title, description, conditions, priority, due_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            raw_text,
            structured['title'],
            structured.get('description', ''),
            json.dumps(structured.get('conditions', []), ensure_ascii=False),
            structured.get('priority', 'medium'),
            structured.get('due_date')
        ))
        self.conn.commit()
        return cursor.lastrowid
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        await update.message.chat.send_action(action="typing")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini
        structured = self.process_with_gemini(message_text)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        task_id = self.save_task(user_id, message_text, structured)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        conditions_text = ""
        if structured.get('conditions'):
            conditions_text = "\nüìå –£—Å–ª–æ–≤–∏—è: " + ", ".join(structured['conditions'])
        
        date_text = ""
        if structured.get('due_date'):
            date_obj = datetime.strptime(structured['due_date'], '%Y-%m-%d')
            date_text = f"\nüìÖ –î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}"
        
        priority_emoji = {
            'high': 'üî¥',
            'medium': 'üü°', 
            'low': 'üü¢'
        }.get(structured.get('priority', 'medium'), 'üü°')
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"üìù *{structured['title']}*\n"
            f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {structured.get('priority', 'medium')}"
            f"{date_text}"
            f"{conditions_text}",
            parse_mode='Markdown'
        )
    
    async def show_today(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        today = date.today().strftime('%Y-%m-%d')
        
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, title, priority, conditions, due_date 
            FROM tasks 
            WHERE user_id = ? 
                AND status = 'active'
                AND (due_date = ? OR due_date IS NULL)
            ORDER BY 
                CASE 
                    WHEN due_date IS NOT NULL THEN 0
                    ELSE 1
                END,
                CASE priority 
                    WHEN 'high' THEN 1 
                    WHEN 'medium' THEN 2 
                    ELSE 3 
                END
        ''', (user_id, today))
        
        tasks = cursor.fetchall()
        
        if not tasks:
            await update.message.reply_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç")
            return
        
        message = f"üìã *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):*\n\n"
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        tasks_with_date = [t for t in tasks if t[4] is not None]
        tasks_without_date = [t for t in tasks if t[4] is None]
        
        if tasks_with_date:
            message += "*üéØ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            for task_id, title, priority, conditions, due_date in tasks_with_date:
                priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
                message += f"{priority_emoji} #{task_id} {title}\n"
        
        if tasks_without_date:
            message += "\n*üìù –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã:*\n"
            for task_id, title, priority, conditions, due_date in tasks_without_date:
                priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
                message += f"{priority_emoji} #{task_id} {title}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def show_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, title, priority, conditions, due_date 
            FROM tasks 
            WHERE user_id = ? AND status = 'active'
            ORDER BY 
                CASE 
                    WHEN due_date IS NOT NULL THEN 0
                    ELSE 1
                END,
                due_date,
                CASE priority 
                    WHEN 'high' THEN 1 
                    WHEN 'medium' THEN 2 
                    ELSE 3 
                END
        ''', (user_id,))
        
        tasks = cursor.fetchall()
        
        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
        
        message = "üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–∞–º
        tasks_by_date = {}
        tasks_no_date = []
        
        for task_id, title, priority, conditions, due_date in tasks:
            if due_date:
                if due_date not in tasks_by_date:
                    tasks_by_date[due_date] = []
                tasks_by_date[due_date].append((task_id, title, priority))
            else:
                tasks_no_date.append((task_id, title, priority))
        
        # –í—ã–≤–æ–¥ –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏
        for task_date in sorted(tasks_by_date.keys()):
            date_obj = datetime.strptime(task_date, '%Y-%m-%d')
            message += f"*üìÖ {date_obj.strftime('%d.%m.%Y')}:*\n"
            
            for task_id, title, priority in tasks_by_date[task_date]:
                priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
                message += f"{priority_emoji} #{task_id} {title}\n"
            message += "\n"
        
        # –ó–∞–¥–∞—á–∏ –±–µ–∑ –¥–∞—Ç—ã
        if tasks_no_date:
            message += "*üìù –ë–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã:*\n"
            for task_id, title, priority in tasks_no_date:
                priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
                message += f"{priority_emoji} #{task_id} {title}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def show_week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        user_id = update.effective_user.id
        today = date.today()
        week_end = today + timedelta(days=7)
        
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, title, priority, due_date 
            FROM tasks 
            WHERE user_id = ? 
                AND status = 'active'
                AND due_date >= ? 
                AND due_date <= ?
            ORDER BY due_date, priority
        ''', (user_id, today.strftime('%Y-%m-%d'), week_end.strftime('%Y-%m-%d')))
        
        tasks = cursor.fetchall()
        
        if not tasks:
            await update.message.reply_text("üì≠ –ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç")
            return
        
        message = "üìÖ *–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
        
        for task_id, title, priority, due_date in tasks:
            date_obj = datetime.strptime(due_date, '%Y-%m-%d')
            priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
            message += f"{date_obj.strftime('%d.%m')} {priority_emoji} #{task_id} {title}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/week - –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
            "/all - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "/done [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
            "/reset_db - —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"
        )
    
    async def mark_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /done 123")
            return
        
        try:
            task_id = int(context.args[0])
            user_id = update.effective_user.id
            
            cursor = self.conn.cursor()
            cursor.execute('''
                UPDATE tasks 
                SET status = 'done' 
                WHERE id = ? AND user_id = ?
            ''', (task_id, user_id))
            self.conn.commit()
            
            if cursor.rowcount > 0:
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /done 123")
    
    async def get_my_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        await update.message.reply_text(f"–í–∞—à Telegram ID: `{user_id}`", parse_mode='Markdown')


    async def reset_database(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        admin_id = os.getenv('ADMIN_TELEGRAM_ID')
        
        # –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω –∞–¥–º–∏–Ω, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if not admin_id:
            await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if str(user_id) != admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if not context.args or context.args[0] != 'confirm':
            await update.message.reply_text(
                "‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–¥–∞—á–∏!\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/reset_db confirm`",
                parse_mode='Markdown'
            )
            return
        
        try:
            cursor = self.conn.cursor()
            cursor.execute("DROP TABLE IF EXISTS tasks")
            self.conn.commit()
            self.setup_database()  # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ
            await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        app = Application.builder().token(self.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        app.add_handler(CommandHandler("start", self.start))
        app.add_handler(CommandHandler("today", self.show_today))
        app.add_handler(CommandHandler("week", self.show_week))
        app.add_handler(CommandHandler("all", self.show_all))
        app.add_handler(CommandHandler("done", self.mark_done))
        app.add_handler(CommandHandler("myid", self.get_my_id))
        app.add_handler(CommandHandler("reset_db", self.reset_database))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        app.run_polling()

if __name__ == "__main__":
    bot = TaskBot()
    bot.run()