from typing import List, Tuple, Optional
from src.database.models import DatabaseManager


class CategoryManager:
    def __init__(self, db: DatabaseManager):
        self.db = db
        self.default_categories = {
            '—Ä–∞–±–æ—Ç–∞': 'üî∑',
            '–¥–æ–º': 'üè†',
            '–ª–∏—á–Ω–æ–µ': 'üë§',
            '—É—á–µ–±–∞': 'üìö',
            '–∑–¥–æ—Ä–æ–≤—å–µ': 'üè•',
            '–ø–æ–∫—É–ø–∫–∏': 'üõí',
            '—Å–ø–æ—Ä—Ç': '‚öΩ',
            '–ø—Ä–æ–µ–∫—Ç—ã': 'üöÄ'
        }

    def get_or_create_category(self, user_id: int, category_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        if not category_name:
            return None

        category_name = category_name.lower().strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_categories = self.db.get_user_categories(user_id)
        existing_names = [cat[1].lower() for cat in user_categories]

        if category_name in existing_names:
            return category_name

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        color = self.default_categories.get(category_name, 'üìÅ')
        self.db.create_category(user_id, category_name, color)
        return category_name

    def get_category_display_name(self, user_id: int, category_name: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∏–∫–æ–Ω–∫–æ–π"""
        if not category_name:
            return ""

        user_categories = self.db.get_user_categories(user_id)
        for cat_id, name, color in user_categories:
            if name.lower() == category_name.lower():
                return f"{color} {name.title()}"

        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∏–∫–æ–Ω–∫—É
        color = self.default_categories.get(category_name.lower(), 'üìÅ')
        return f"{color} {category_name.title()}"

    def format_tasks_by_category(self, tasks: List[tuple]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        if not tasks:
            return "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categorized_tasks = {}
        uncategorized_tasks = []

        for task in tasks:
            task_id, title, priority, conditions, due_date, category, tags = task
            if category:
                if category not in categorized_tasks:
                    categorized_tasks[category] = []
                categorized_tasks[category].append((task_id, title, priority, due_date))
            else:
                uncategorized_tasks.append((task_id, title, priority, due_date))

        message = ""

        # –í—ã–≤–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category, category_tasks in sorted(categorized_tasks.items()):
            category_display = self.get_category_display_name(0, category)  # user_id –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
            message += f"\n*{category_display}:*\n"

            for task_id, title, priority, due_date in category_tasks:
                priority_emoji = self._get_priority_emoji(priority)
                date_text = ""
                if due_date:
                    from datetime import datetime
                    date_obj = datetime.strptime(due_date, '%Y-%m-%d')
                    date_text = f" ({date_obj.strftime('%d.%m')})"

                message += f"{priority_emoji} #{task_id} {title}{date_text}\n"

        # –ó–∞–¥–∞—á–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if uncategorized_tasks:
            message += "\n*üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n"
            for task_id, title, priority, due_date in uncategorized_tasks:
                priority_emoji = self._get_priority_emoji(priority)
                date_text = ""
                if due_date:
                    from datetime import datetime
                    date_obj = datetime.strptime(due_date, '%Y-%m-%d')
                    date_text = f" ({date_obj.strftime('%d.%m')})"

                message += f"{priority_emoji} #{task_id} {title}{date_text}\n"

        return message.strip()

    def get_categories_list(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        categories = self.db.get_user_categories(user_id)

        if not categories:
            return "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

        message = "üìÇ *–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n\n"
        for cat_id, name, color in categories:
            emoji = color or 'üìÅ'
            message += f"{emoji} {name.title()}\n"

        return message

    def _get_priority_emoji(self, priority: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        return {
            'high': 'üî¥',
            'medium': 'üü°',
            'low': 'üü¢'
        }.get(priority, 'üü°')

    def create_user_category(self, user_id: int, category_name: str, color: str = None) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            category_name = category_name.lower().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_categories = self.db.get_user_categories(user_id)
            existing_names = [cat[1].lower() for cat in user_categories]

            if category_name in existing_names:
                return False

            if not color:
                color = self.default_categories.get(category_name, 'üìÅ')

            self.db.create_category(user_id, category_name, color)
            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            return False