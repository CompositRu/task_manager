import asyncio
import logging
from datetime import datetime, timedelta, time
from typing import List, Callable, Awaitable
from src.database.models import DatabaseManager
from src.config.manager import ConfigManager


class ReminderScheduler:
    def __init__(self, db: DatabaseManager, send_reminder_callback: Callable[[int, str, str], Awaitable[None]]):
        self.db = db
        self.send_reminder_callback = send_reminder_callback
        self.is_running = False
        self.config = ConfigManager()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        morning_time_str = self.config.get_morning_reminder_time()
        try:
            hour, minute = map(int, morning_time_str.split(':'))
            self.morning_reminder_time = time(hour, minute)
        except:
            self.morning_reminder_time = time(9, 0)  # Fallback –Ω–∞ 9:00

    def set_morning_reminder_time(self, hour: int, minute: int = 0):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.morning_reminder_time = time(hour, minute)

    async def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        self.is_running = True

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        check_interval = self.config.get_check_interval()
        logging.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫)")

        while self.is_running:
            try:
                await self._check_and_send_reminders()
                await self._check_condition_reminders()
                await asyncio.sleep(check_interval)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(check_interval)

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        pending_reminders = self.db.get_pending_reminders()

        for reminder_id, task_id, user_id, task_title, reminder_type in pending_reminders:
            try:
                message = self._format_reminder_message(task_title, reminder_type)
                await self.send_reminder_callback(user_id, message, reminder_type)
                self.db.mark_reminder_sent(reminder_id)
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")

    async def _check_condition_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á —Å —É—Å–ª–æ–≤–∏—è–º–∏"""
        tasks_for_check = self.db.get_tasks_for_condition_check()

        for task_id, user_id, title, conditions_json, last_check, interval in tasks_for_check:
            try:
                from src.ai.gemini_processor import GeminiProcessor
                import json

                conditions = json.loads(conditions_json) if conditions_json else []
                if not conditions:
                    continue

                gemini = GeminiProcessor()
                question = gemini.process_condition_check(title, conditions)

                message = f"üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏:\n\nüìù *{title}*\n\n‚ùì {question}"

                await self.send_reminder_callback(user_id, message, 'condition_check')
                self.db.update_last_condition_check(task_id)

                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–∞–¥–∞—á–∏ {task_id}: {e}")

    def _format_reminder_message(self, task_title: str, reminder_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if reminder_type == 'morning':
            return f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n\nüìã –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:\nüìù {task_title}"
        elif reminder_type == 'specific_time':
            return f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüìù {task_title}"
        elif reminder_type == 'deadline':
            return f"üö® *–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω!*\n\nüìù {task_title}"
        else:
            return f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüìù {task_title}"

    def create_morning_reminders(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
            from datetime import date
            today = date.today()
            tomorrow = today + timedelta(days=1)

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ DatabaseManager)
            # tasks_today = self.db.get_tasks_by_date_range(today.strftime('%Y-%m-%d'))

            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º
            tomorrow_morning = datetime.combine(tomorrow, self.morning_reminder_time)

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    def schedule_task_reminder(self, task_id: int, user_id: int, reminder_time: datetime, reminder_type: str = 'specific_time'):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            self.db.add_reminder(task_id, user_id, reminder_time, reminder_type)
            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {reminder_time}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def schedule_deadline_reminder(self, task_id: int, user_id: int, due_date: datetime):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
            reminder_time = due_date - timedelta(days=1)
            reminder_time = reminder_time.replace(hour=self.morning_reminder_time.hour,
                                                minute=self.morning_reminder_time.minute)

            if reminder_time > datetime.now():
                self.schedule_task_reminder(task_id, user_id, reminder_time, 'deadline')

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")