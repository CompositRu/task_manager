import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Callable, Awaitable, Optional
from dataclasses import dataclass

from src.database.models import DatabaseManager
from src.config.manager import ConfigManager


@dataclass
class Reminder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏"""
    id: int
    task_id: int
    user_id: int
    time: datetime
    type: str
    title: str

    def __lt__(self, other):
        """–î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return self.time < other.time


class SmartReminderScheduler:
    """
    Event-driven –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ–º.

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –°–ø–∏—Ç –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–æ polling
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 72 —á–∞—Å–∞ –≤–ø–µ—Ä—ë–¥
    - –î–æ–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ (48-72—á –æ–∫–Ω–æ)
    - –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
    - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ —Ä–∞–∑ –≤ –¥–µ–Ω—å
    """

    def __init__(self, db: DatabaseManager, send_reminder_callback: Callable[[int, str, str], Awaitable[None]]):
        self.db = db
        self.send_reminder_callback = send_reminder_callback
        self.config = ConfigManager()

        # –û—á–µ—Ä–µ–¥—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        self.reminder_queue: List[Reminder] = []

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.wake_event = asyncio.Event()  # –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–Ω–∞

        # –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.last_daily_reload: Optional[datetime] = None
        self.last_cleanup: Optional[datetime] = None
        self.last_config_reload: Optional[datetime] = None

    async def start_scheduler(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = True
        logging.info("üöÄ SmartReminderScheduler –∑–∞–ø—É—â–µ–Ω (event-driven —Ä–µ–∂–∏–º)")

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ 72 —á–∞—Å–∞
        await self.load_initial_reminders()

        while self.is_running:
            try:
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                await self.check_daily_tasks()

                # 2. –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                next_wake_time = self.get_next_wake_time()

                # 3. –°–ø–∏–º –¥–æ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è)
                await self.sleep_until(next_wake_time)

                # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                await self.process_due_reminders()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ retry

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        self.wake_event.set()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–Ω
        logging.info("SmartReminderScheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def load_initial_reminders(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ 72 —á–∞—Å–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        try:
            future_reminders = self.db.get_future_reminders(hours=72)

            self.reminder_queue = [
                Reminder(
                    id=r[0],
                    task_id=r[1],
                    user_id=r[2],
                    title=r[3],
                    type=r[4],
                    time=datetime.fromisoformat(r[5]) if isinstance(r[5], str) else r[5]
                )
                for r in future_reminders
            ]

            self.reminder_queue.sort()
            self.last_daily_reload = datetime.now()

            logging.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.reminder_queue)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ 72 —á–∞—Å–∞")
            if self.reminder_queue:
                logging.info(f"   –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {self.reminder_queue[0].time.strftime('%Y-%m-%d %H:%M')}")
                logging.info(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {self.reminder_queue[-1].time.strftime('%Y-%m-%d %H:%M')}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def check_daily_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
        now = datetime.now()

        # 1. –î–æ–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
        if self.should_reload_db(now):
            await self.reload_next_day_reminders()
            self.last_daily_reload = now

        # 2. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤ –∫–æ–Ω—Ü–µ –¥–Ω—è)
        if self.should_cleanup_db(now):
            await self.cleanup_old_reminders()
            self.last_cleanup = now

        # 3. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤ 03:00)
        if self.should_reload_config(now):
            self.config.reload_config()
            self.last_config_reload = now
            logging.info("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")

    async def reload_next_day_reminders(self):
        """–î–æ–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å 48 –¥–æ 72 —á–∞—Å–æ–≤"""
        try:
            new_reminders = self.db.get_future_reminders(hours=72, from_hours=48)

            new_reminder_objects = [
                Reminder(
                    id=r[0],
                    task_id=r[1],
                    user_id=r[2],
                    title=r[3],
                    type=r[4],
                    time=datetime.fromisoformat(r[5]) if isinstance(r[5], str) else r[5]
                )
                for r in new_reminders
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º
            self.reminder_queue.extend(new_reminder_objects)
            self.reminder_queue.sort()

            logging.info(f"üì• –î–æ–≥—Ä—É–∂–µ–Ω–æ {len(new_reminder_objects)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ–∫–Ω–æ 48-72—á)")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def cleanup_old_reminders(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î"""
        try:
            deleted_count = self.db.delete_old_reminders(days_old=7)
            logging.info(f"üóëÔ∏è  –û—á–∏—â–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")

    def should_reload_db(self, now: datetime) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –¥–æ–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if not self.last_daily_reload:
            return False  # –¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

        # –†–∞–∑ –≤ —Å—É—Ç–∫–∏
        hours_since_reload = (now - self.last_daily_reload).total_seconds() / 3600
        return hours_since_reload >= 24

    def should_cleanup_db(self, now: datetime) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤ –∫–æ–Ω—Ü–µ –¥–Ω—è)"""
        if not self.last_cleanup:
            self.last_cleanup = now.replace(hour=0, minute=0, second=0)

        # –í 23:55 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        return now.hour == 23 and now.minute >= 55 and \
               (now.date() > self.last_cleanup.date())

    def should_reload_config(self, now: datetime) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ (–≤ 03:00)"""
        if not self.last_config_reload:
            self.last_config_reload = now.replace(hour=0, minute=0, second=0)

        # –í 03:00 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
        return now.hour == 3 and now.minute < 5 and \
               (now.date() > self.last_config_reload.date())

    def add_reminder_to_queue(self, reminder: Reminder):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º < 72 —á–∞—Å–æ–≤.
        """
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤—ã–≤–∞–µ–º
        self.reminder_queue.append(reminder)
        self.reminder_queue.sort()

        logging.info(f"‚ûï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {reminder.time.strftime('%Y-%m-%d %H:%M')} ({reminder.title})")

        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–Ω, –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å—Ç–∞–ª–æ –ø–µ—Ä–≤—ã–º
        if self.reminder_queue[0] == reminder:
            self.wake_event.set()
            logging.info("‚è∞ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Å–Ω–∞ - –Ω–æ–≤–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

    def get_next_wake_time(self) -> datetime:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"""
        now = datetime.now()
        candidates = []

        # 1. –ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if self.reminder_queue:
            candidates.append(self.reminder_queue[0].time)

        # 2. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ë–î (—á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π)
        if self.last_daily_reload:
            next_reload = self.last_daily_reload + timedelta(hours=24)
            candidates.append(next_reload)
        else:
            candidates.append(now + timedelta(hours=24))

        # 3. –û—á–∏—Å—Ç–∫–∞ –ë–î (23:55)
        next_cleanup = now.replace(hour=23, minute=55, second=0, microsecond=0)
        if next_cleanup <= now:
            next_cleanup += timedelta(days=1)
        candidates.append(next_cleanup)

        # 4. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ (03:00)
        next_config_reload = now.replace(hour=3, minute=0, second=0, microsecond=0)
        if next_config_reload <= now:
            next_config_reload += timedelta(days=1)
        candidates.append(next_config_reload)

        # –í—ã–±–∏—Ä–∞–µ–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –±—É–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
        future_times = [t for t in candidates if t > now]

        if future_times:
            next_time = min(future_times)
            return next_time
        else:
            # Fallback: —Å–ø–∏–º 1 —á–∞—Å
            return now + timedelta(hours=1)

    async def sleep_until(self, wake_time: datetime):
        """–°–ø–∏—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        now = datetime.now()
        seconds = (wake_time - now).total_seconds()

        if seconds <= 0:
            return

        hours = seconds / 3600
        logging.info(f"üò¥ –°–æ–Ω –¥–æ {wake_time.strftime('%Y-%m-%d %H:%M:%S')} ({hours:.1f}—á)")

        try:
            await asyncio.wait_for(self.wake_event.wait(), timeout=seconds)
            # –ü—Ä–µ—Ä–≤–∞–Ω —Å–æ–±—ã—Ç–∏–µ–º
            self.wake_event.clear()
            logging.info("‚è∞ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ —Å–æ–±—ã—Ç–∏—é (–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)")
        except asyncio.TimeoutError:
            # –ü—Ä–æ—Å–Ω—É–ª–∏—Å—å –ø–æ —Ç–∞–π–º–µ—Ä—É
            logging.info("‚è∞ –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")

    async def process_due_reminders(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        now = datetime.now()
        processed = 0

        while self.reminder_queue and self.reminder_queue[0].time <= now:
            reminder = self.reminder_queue.pop(0)

            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = self._format_reminder_message(reminder.title, reminder.type)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await self.send_reminder_callback(
                    reminder.user_id,
                    message,
                    reminder.type
                )

                # –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                self.db.mark_reminder_sent(reminder.id)
                processed += 1

                logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder.id}: {reminder.title}")

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è #{reminder.id}: {e}")

        if processed > 0:
            logging.info(f"üì§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    def _format_reminder_message(self, task_title: str, reminder_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        if reminder_type == 'morning':
            return f"üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!*\n\nüìã –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:\nüìù {task_title}"
        elif reminder_type == 'specific_time':
            return f"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüìù {task_title}"
        elif reminder_type == 'deadline':
            return f"üö® *–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω!*\n\nüìù {task_title}"
        elif reminder_type == 'time_based':
            return f"‚è±Ô∏è *–°–∫–æ—Ä–æ —Å–æ–±—ã—Ç–∏–µ*\n\nüìù {task_title}"
        else:
            return f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\nüìù {task_title}"

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º API
    def schedule_task_reminder(self, task_id: int, user_id: int, reminder_time: datetime, reminder_type: str = 'specific_time'):
        """–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å handlers)"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            self.db.add_reminder(task_id, user_id, reminder_time, reminder_type)

            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 72 —á–∞—Å–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            hours_until = (reminder_time - datetime.now()).total_seconds() / 3600
            if hours_until <= 72:
                # –ü–æ–ª—É—á–∞–µ–º title –∑–∞–¥–∞—á–∏ –¥–ª—è Reminder –æ–±—ä–µ–∫—Ç–∞
                task = self.db.get_task_by_id(task_id)
                if task:
                    reminder = Reminder(
                        id=self.db.get_last_reminder_id(),  # –ü–æ–ª—É—á–∞–µ–º ID —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        task_id=task_id,
                        user_id=user_id,
                        time=reminder_time,
                        type=reminder_type,
                        title=task[2] if len(task) > 2 else "–ó–∞–¥–∞—á–∞"  # task[2] - —ç—Ç–æ title
                    )
                    self.add_reminder_to_queue(reminder)

            logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {reminder_time}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def schedule_deadline_reminder(self, task_id: int, user_id: int, due_date: datetime):
        """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ –≤ 9:00
            morning_time_str = self.config.get_morning_reminder_time()
            hour, minute = map(int, morning_time_str.split(':'))

            reminder_time = due_date - timedelta(days=1)
            reminder_time = reminder_time.replace(hour=hour, minute=minute)

            if reminder_time > datetime.now():
                self.schedule_task_reminder(task_id, user_id, reminder_time, 'deadline')

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")
