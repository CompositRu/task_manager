import os
import json
import tempfile
from datetime import datetime, date, timedelta
from telegram import Update
from telegram.ext import ContextTypes

from src.database.models import DatabaseManager
from src.ai.gemini_processor import GeminiProcessor
from src.voice.whisper_processor import VoiceProcessor
from src.categories.manager import CategoryManager
from src.reminders.scheduler import ReminderScheduler


class TaskBotHandlers:
    def __init__(self, db: DatabaseManager):
        self.db = db
        self.gemini = GeminiProcessor()
        self.voice_processor = VoiceProcessor()  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.category_manager = CategoryManager(db)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message_text = update.message.text

        await self.process_task_from_text(update, context, message_text, user_id, is_voice=False)

    async def process_task_from_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   text: str, user_id: int, is_voice: bool = False):
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""

        await update.message.chat.send_action(action="typing")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini
        structured = self.gemini.process_task_text(text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if structured.get('category'):
            structured['category'] = self.category_manager.get_or_create_category(
                user_id, structured['category']
            )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        task_id = self.db.save_task(user_id, text, structured)

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await self._schedule_reminders(task_id, user_id, structured)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        await self._send_task_confirmation(update, task_id, structured, is_voice)

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini Audio API"""
        if not self.gemini.is_voice_processing_available():
            await update.message.reply_text(
                "üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å GEMINI_API_KEY."
            )
            return

        user_id = update.effective_user.id

        await update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = await context.bot.get_file(update.message.voice.file_id)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as tmp_ogg:
                await voice_file.download_to_drive(tmp_ogg.name)
                ogg_path = tmp_ogg.name

            try:
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini
                transcribed_text = await self.gemini.process_voice_message(ogg_path)

                if not transcribed_text:
                    await update.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: _{transcribed_text}_", parse_mode='Markdown')

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
                await self.process_task_from_text(update, context, transcribed_text, user_id, is_voice=True)

            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(ogg_path):
                    os.unlink(ogg_path)

        except Exception as e:
            print(f"Error processing voice: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º."
            )

    async def show_today(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        today = date.today().strftime('%Y-%m-%d')

        tasks = self.db.get_tasks_by_date(user_id, today)

        if not tasks:
            await update.message.reply_text("üì≠ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç")
            return

        message = f"üìã *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.now().strftime('%d.%m.%Y')}):*\n"
        message += self.category_manager.format_tasks_by_category(tasks)

        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        tasks = self.db.get_all_active_tasks(user_id)

        if not tasks:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        message = "üìã *–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n"
        message += self.category_manager.format_tasks_by_category(tasks)

        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é"""
        user_id = update.effective_user.id
        today = date.today()
        week_end = today + timedelta(days=7)

        # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ –≤ DatabaseManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç
        # tasks = self.db.get_tasks_by_date_range(user_id, today.strftime('%Y-%m-%d'), week_end.strftime('%Y-%m-%d'))

        await update.message.reply_text("üìÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

    async def show_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        categories_text = self.category_manager.get_categories_list(user_id)
        await update.message.reply_text(categories_text, parse_mode='Markdown')

    async def show_category_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not context.args:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: /category —Ä–∞–±–æ—Ç–∞\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: /categories"
            )
            return

        user_id = update.effective_user.id
        category_name = " ".join(context.args).lower()

        tasks = self.db.get_tasks_by_category(user_id, category_name)

        if not tasks:
            await update.message.reply_text(f"üì≠ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}' –Ω–µ—Ç –∑–∞–¥–∞—á")
            return

        category_display = self.category_manager.get_category_display_name(user_id, category_name)
        message = f"üìã *–ó–∞–¥–∞—á–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_display}:*\n\n"

        for task_id, title, priority, conditions, due_date, category, tags in tasks:
            priority_emoji = {'high': 'üî¥', 'medium': 'üü°', 'low': 'üü¢'}.get(priority, 'üü°')
            date_text = ""
            if due_date:
                date_obj = datetime.strptime(due_date, '%Y-%m-%d')
                date_text = f" ({date_obj.strftime('%d.%m')})"

            message += f"{priority_emoji} #{task_id} {title}{date_text}\n"

        await update.message.reply_text(message, parse_mode='Markdown')

    async def mark_done(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /done 123")
            return

        try:
            task_id = int(context.args[0])
            user_id = update.effective_user.id

            if self.db.mark_task_done(task_id, user_id):
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
            else:
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ #{task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /done 123")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        voice_status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞ (Gemini Audio)" if self.gemini.is_voice_processing_available() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏.\n\n"
            "üìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + voice_status + "\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/today - –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/week - –∑–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
            "/all - –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
            "/categories - –º–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/category [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –∑–∞–¥–∞—á–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
            "/done [id] - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n"
            "/myid - –º–æ–π ID\n"
            "/reset_db - —É–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"
        )

    async def get_my_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        await update.message.reply_text(f"–í–∞—à Telegram ID: `{user_id}`", parse_mode='Markdown')

    async def reset_database(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        user_id = update.effective_user.id
        admin_id = os.getenv('ADMIN_TELEGRAM_ID')

        if not admin_id:
            await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        if str(user_id) != admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        if not context.args or context.args[0] != 'confirm':
            await update.message.reply_text(
                "‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–¥–∞—á–∏!\n"
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "`/reset_db confirm`",
                parse_mode='Markdown'
            )
            return

        try:
            self.db.reset_database()
            await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def _schedule_reminders(self, task_id: int, user_id: int, structured: dict):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏"""
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if structured.get('reminder_needed') and structured.get('reminder_time'):
            try:
                reminder_time_str = structured['reminder_time']
                hour, minute = map(int, reminder_time_str.split(':'))

                # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
                reminder_date = date.today()
                if datetime.now().time() > datetime.time(hour, minute):
                    reminder_date = reminder_date + timedelta(days=1)

                reminder_datetime = datetime.combine(reminder_date, datetime.time(hour, minute))

                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                # self.reminder_scheduler.schedule_task_reminder(task_id, user_id, reminder_datetime)

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
        if structured.get('due_date'):
            try:
                due_date = datetime.strptime(structured['due_date'], '%Y-%m-%d')
                # self.reminder_scheduler.schedule_deadline_reminder(task_id, user_id, due_date)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ: {e}")

    async def _send_task_confirmation(self, update: Update, task_id: int, structured: dict, is_voice: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        # –£—Å–ª–æ–≤–∏—è
        conditions_text = ""
        if structured.get('conditions'):
            conditions_text = "\nüìå –£—Å–ª–æ–≤–∏—è: " + ", ".join(structured['conditions'])

        # –î–∞—Ç–∞
        date_text = ""
        if structured.get('due_date'):
            date_obj = datetime.strptime(structured['due_date'], '%Y-%m-%d')
            date_text = f"\nüìÖ –î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}"

        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category_text = ""
        if structured.get('category'):
            category_display = self.category_manager.get_category_display_name(
                update.effective_user.id, structured['category']
            )
            category_text = f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_display}"

        # –¢–µ–≥–∏
        tags_text = ""
        if structured.get('tags'):
            tags_text = f"\nüè∑Ô∏è –¢–µ–≥–∏: {', '.join(structured['tags'])}"

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_emoji = {
            'high': 'üî¥',
            'medium': 'üü°',
            'low': 'üü¢'
        }.get(structured.get('priority', 'medium'), 'üü°')

        # –ò–∫–æ–Ω–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_emoji = "üé§ " if is_voice else ""

        await update.message.reply_text(
            f"‚úÖ {voice_emoji}–ó–∞–¥–∞—á–∞ #{task_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
            f"üìù *{structured['title']}*\n"
            f"{priority_emoji} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {structured.get('priority', 'medium')}"
            f"{date_text}"
            f"{category_text}"
            f"{tags_text}"
            f"{conditions_text}",
            parse_mode='Markdown'
        )