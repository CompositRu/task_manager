"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback query –æ—Ç Inline –∫–Ω–æ–ø–æ–∫
"""
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from src.database.models import DatabaseManager
from src.telegram_ui.keyboards import KeyboardBuilder


class CallbackHandler:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query"""

    def __init__(self, db: DatabaseManager, reminder_scheduler=None):
        self.db = db
        self.reminder_scheduler = reminder_scheduler
        self.keyboards = KeyboardBuilder()

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback query

        –§–æ—Ä–º–∞—Ç callback_data: "action:param1:param2:..."
        """
        query = update.callback_query
        await query.answer()  # –£–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –∑–∞–≥—Ä—É–∑–∫–∏

        callback_data = query.data
        user_id = query.from_user.id

        try:
            # –ü–∞—Ä—Å–∏–º callback_data
            parts = callback_data.split(':')
            action = parts[0]

            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ action
            if action == "task_done":
                await self._handle_task_done(query, user_id, int(parts[1]))

            elif action == "task_delete":
                await self._handle_task_delete(query, user_id, int(parts[1]))

            elif action == "task_view":
                await self._handle_task_view(query, user_id, int(parts[1]))

            elif action == "task_edit":
                await self._handle_task_edit(query, user_id, int(parts[1]))

            elif action == "task_snooze":
                await self._handle_task_snooze(query, user_id, int(parts[1]), int(parts[2]))

            elif action == "category_view":
                await self._handle_category_view(query, user_id, parts[1])

            elif action == "confirm":
                await self._handle_confirm(query, user_id, parts[1], int(parts[2]))

            elif action == "cancel":
                await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

            elif action == "settings_reminders":
                await self._handle_settings_reminders(query, user_id)

            elif action == "settings_categories":
                await self._handle_settings_categories(query, user_id)

            elif action == "settings_time":
                await self._handle_settings_time(query, user_id)

            elif action == "settings_back":
                await self._handle_settings_main(query, user_id)

            else:
                await query.edit_message_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def _handle_task_done(self, query, user_id: int, task_id: int):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        result = self.db.mark_task_done(task_id)

        if result:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ –∑–∞–¥–∞—á–µ
            task = self.db.get_task_by_id(task_id)
            if task:
                title = task[2]
                await query.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n<b>{title}</b>", parse_mode='HTML')
            else:
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É")

    async def _handle_task_delete(self, query, user_id: int, task_id: int):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        keyboard = self.keyboards.get_confirmation_keyboard("delete_task", task_id)
        await query.edit_message_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?",
            reply_markup=keyboard
        )

    async def _handle_task_view(self, query, user_id: int, task_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏"""
        task = self.db.get_task_by_id(task_id)

        if not task:
            await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        task_id, user_id, title, description, priority, due_date, category, tags, status = task

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        text = f"<b>üìã {title}</b>\n\n"

        if description:
            text += f"<i>{description}</i>\n\n"

        text += f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"

        if due_date:
            text += f"üìÖ –î–µ–¥–ª–∞–π–Ω: {due_date}\n"

        if category:
            text += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"

        if tags and tags != "[]":
            text += f"üè∑ –¢–µ–≥–∏: {tags}\n"

        text += f"üìä –°—Ç–∞—Ç—É—Å: {status}"

        keyboard = self.keyboards.get_task_actions_keyboard(task_id)
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=keyboard)

    async def _handle_task_edit(self, query, user_id: int, task_id: int):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        await query.edit_message_text(
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
            "–ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
        )

    async def _handle_task_snooze(self, query, user_id: int, task_id: int, minutes: int):
        """–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        if not self.reminder_scheduler:
            await query.edit_message_text("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        new_time = datetime.now() + timedelta(minutes=minutes)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        self.db.add_reminder(task_id, user_id, new_time, 'snoozed')

        # –ï—Å–ª–∏ –µ—Å—Ç—å scheduler, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if hasattr(self.reminder_scheduler, 'schedule_task_reminder'):
            self.reminder_scheduler.schedule_task_reminder(task_id, user_id, new_time, 'snoozed')

        hours = minutes // 60
        mins = minutes % 60

        time_str = ""
        if hours > 0:
            time_str += f"{hours} —á "
        if mins > 0:
            time_str += f"{mins} –º–∏–Ω"

        await query.edit_message_text(
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ {time_str}\n"
            f"‚è∞ –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: {new_time.strftime('%d.%m.%Y %H:%M')}"
        )

    async def _handle_category_view(self, query, user_id: int, category: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        from src.categories.manager import CategoryManager
        category_manager = CategoryManager(self.db)

        if category == "all":
            tasks = self.db.get_all_tasks(user_id)
            text = "üìã <b>–í—Å–µ –∑–∞–¥–∞—á–∏</b>\n\n"
        else:
            tasks = category_manager.get_tasks_by_category(user_id, category)
            text = f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.title()}</b>\n\n"

        if not tasks:
            text += "–ù–µ—Ç –∑–∞–¥–∞—á"
            await query.edit_message_text(text, parse_mode='HTML')
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
        for task in tasks[:10]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10 –∑–∞–¥–∞—á
            task_id, _, title, _, priority, due_date, _, _, status = task
            icon = "‚úÖ" if status == "completed" else "‚èπ"
            text += f"{icon} <b>{title}</b>\n"
            if due_date:
                text += f"   üìÖ {due_date}\n"

        if len(tasks) > 10:
            text += f"\n... –∏ –µ—â—ë {len(tasks) - 10} –∑–∞–¥–∞—á"

        keyboard = self.keyboards.get_task_list_keyboard(tasks[:10])
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=keyboard)

    async def _handle_confirm(self, query, user_id: int, action: str, item_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        if action == "delete_task":
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ DatabaseManager)
            task = self.db.get_task_by_id(item_id)
            if task:
                self.db.mark_task_done(item_id)  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º mark_done
                await query.edit_message_text(f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
            else:
                await query.edit_message_text("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            await query.edit_message_text("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

    async def _handle_settings_main(self, query, user_id: int):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = self.keyboards.get_settings_keyboard()
        await query.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def _handle_settings_reminders(self, query, user_id: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        keyboard = self.keyboards.get_reminder_settings_keyboard()
        await query.edit_message_text(
            "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
            parse_mode='HTML',
            reply_markup=keyboard
        )

    async def _handle_settings_categories(self, query, user_id: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        categories = self.db.get_user_categories(user_id)

        text = "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        if categories:
            for cat in categories:
                cat_id, name, color = cat
                text += f"{color} {name.title()}\n"
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π"

        keyboard = self.keyboards.get_back_button("settings_back")
        await query.edit_message_text(text, parse_mode='HTML', reply_markup=keyboard)

    async def _handle_settings_time(self, query, user_id: int):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        await query.edit_message_text(
            "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            "–í—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ config.yaml\n"
            "–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: 09:00\n"
            "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: –∑–∞ 1 –∏ 3 –¥–Ω—è",
            parse_mode='HTML',
            reply_markup=self.keyboards.get_back_button("settings_back")
        )
