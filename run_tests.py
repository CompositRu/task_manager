#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Task Manager Bot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_tests.py              # –í—Å–µ —Ç–µ—Å—Ç—ã
    python run_tests.py unit         # –¢–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã
    python run_tests.py integration  # –¢–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã
    python run_tests.py -v           # Verbose —Ä–µ–∂–∏–º
    python run_tests.py --coverage   # –° coverage –æ—Ç—á—ë—Ç–æ–º
    python run_tests.py --html       # HTML –æ—Ç—á—ë—Ç coverage
"""

import sys
import subprocess
import argparse


def main():
    parser = argparse.ArgumentParser(description='Run Task Manager Bot tests')

    parser.add_argument(
        'test_type',
        nargs='?',
        choices=['unit', 'integration', 'all'],
        default='all',
        help='Type of tests to run (default: all)'
    )

    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Verbose output'
    )

    parser.add_argument(
        '--coverage',
        action='store_true',
        help='Run with coverage report'
    )

    parser.add_argument(
        '--html',
        action='store_true',
        help='Generate HTML coverage report'
    )

    parser.add_argument(
        '-k',
        metavar='EXPRESSION',
        help='Only run tests matching the given expression'
    )

    parser.add_argument(
        '--failed',
        action='store_true',
        help='Rerun only failed tests from last run'
    )

    args = parser.parse_args()

    # –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ pytest
    cmd = ['pytest']

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
    if args.test_type == 'unit':
        cmd.append('tests/unit')
    elif args.test_type == 'integration':
        cmd.append('tests/integration')
    else:
        cmd.append('tests/')

    # Verbose —Ä–µ–∂–∏–º
    if args.verbose:
        cmd.append('-v')
    else:
        cmd.append('-q')

    # Coverage
    if args.coverage or args.html:
        cmd.extend([
            '--cov=src',
            '--cov-report=term-missing'
        ])

        if args.html:
            cmd.append('--cov-report=html')
            print("\nüìä HTML coverage report will be generated in htmlcov/")

    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    if args.k:
        cmd.extend(['-k', args.k])

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ failed —Ç–µ—Å—Ç–æ–≤
    if args.failed:
        cmd.append('--lf')

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
    cmd.append('--color=yes')

    print(f"\nüß™ Running tests: {' '.join(cmd)}\n")
    print("=" * 70)

    try:
        result = subprocess.run(cmd)
        sys.exit(result.returncode)
    except KeyboardInterrupt:
        print("\n\n‚ùå Tests interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Error running tests: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()
