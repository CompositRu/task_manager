"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è CategoryManager
"""
import pytest
from datetime import datetime
from src.categories.manager import CategoryManager


@pytest.fixture
def category_manager(temp_db):
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è CategoryManager —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ë–î"""
    return CategoryManager(temp_db)


@pytest.fixture
def sample_user_id():
    """–¢–µ—Å—Ç–æ–≤—ã–π user_id"""
    return 12345


def test_get_or_create_category_new(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_name = category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    assert category_name == "—Ä–∞–±–æ—Ç–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î
    categories = category_manager.db.get_user_categories(sample_user_id)
    assert len(categories) == 1
    assert categories[0][1] == "—Ä–∞–±–æ—Ç–∞"


def test_get_or_create_category_existing(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–Ω–æ–≤–∞
    category_name = category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    assert category_name == "—Ä–∞–±–æ—Ç–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –¥—É–±–ª–∏–∫–∞—Ç
    categories = category_manager.db.get_user_categories(sample_user_id)
    assert len(categories) == 1


def test_get_or_create_category_case_insensitive(category_manager, sample_user_id):
    """–¢–µ—Å—Ç case-insensitive –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    category_manager.get_or_create_category(sample_user_id, "–†–∞–±–æ—Ç–∞")
    category_name = category_manager.get_or_create_category(sample_user_id, "–†–ê–ë–û–¢–ê")

    assert category_name == "—Ä–∞–±–æ—Ç–∞"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    categories = category_manager.db.get_user_categories(sample_user_id)
    assert len(categories) == 1


def test_get_or_create_category_empty(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    result = category_manager.get_or_create_category(sample_user_id, "")

    assert result is None


def test_get_or_create_category_with_spaces(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –æ–±—Ä–µ–∑–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–≤"""
    category_name = category_manager.get_or_create_category(sample_user_id, "  —Ä–∞–±–æ—Ç–∞  ")

    assert category_name == "—Ä–∞–±–æ—Ç–∞"


def test_get_category_display_name_default(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    display_name = category_manager.get_category_display_name(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    assert "üî∑" in display_name
    assert "–†–∞–±–æ—Ç–∞" in display_name


def test_get_category_display_name_custom(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_manager.create_user_category(sample_user_id, "–ø—Ä–æ–µ–∫—Ç", "üöÄ")

    display_name = category_manager.get_category_display_name(sample_user_id, "–ø—Ä–æ–µ–∫—Ç")

    assert "üöÄ" in display_name
    assert "–ü—Ä–æ–µ–∫—Ç" in display_name


def test_get_category_display_name_empty(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    display_name = category_manager.get_category_display_name(sample_user_id, "")

    assert display_name == ""


def test_get_category_display_name_nonexistent(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    display_name = category_manager.get_category_display_name(sample_user_id, "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è")

    # –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    assert "üìÅ" in display_name
    assert "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è" in display_name


def test_format_tasks_by_category_empty(category_manager):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    message = category_manager.format_tasks_by_category([])

    assert message == "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç"


def test_format_tasks_by_category_with_categories(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")
    category_manager.get_or_create_category(sample_user_id, "–¥–æ–º")

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á–∏
    tasks = [
        (1, "–ó–∞–¥–∞—á–∞ —Ä–∞–±–æ—Ç–∞ 1", "high", None, "2025-10-10", "—Ä–∞–±–æ—Ç–∞", None),
        (2, "–ó–∞–¥–∞—á–∞ –¥–æ–º 1", "medium", None, "2025-10-11", "–¥–æ–º", None),
        (3, "–ó–∞–¥–∞—á–∞ —Ä–∞–±–æ—Ç–∞ 2", "low", None, None, "—Ä–∞–±–æ—Ç–∞", None),
    ]

    message = category_manager.format_tasks_by_category(tasks)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert "üî∑ –†–∞–±–æ—Ç–∞" in message or "—Ä–∞–±–æ—Ç–∞" in message.lower()
    assert "üè† –î–æ–º" in message or "–¥–æ–º" in message.lower()
    assert "#1" in message
    assert "#2" in message
    assert "#3" in message


def test_format_tasks_by_category_uncategorized(category_manager):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    tasks = [
        (1, "–ó–∞–¥–∞—á–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "medium", None, None, None, None),
        (2, "–ï—â—ë –∑–∞–¥–∞—á–∞ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "high", None, "2025-10-10", None, None),
    ]

    message = category_manager.format_tasks_by_category(tasks)

    assert "üìÅ –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in message
    assert "#1" in message
    assert "#2" in message


def test_format_tasks_by_category_priority_emoji(category_manager):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    tasks = [
        (1, "–ó–∞–¥–∞—á–∞ high", "high", None, None, "—Ä–∞–±–æ—Ç–∞", None),
        (2, "–ó–∞–¥–∞—á–∞ medium", "medium", None, None, "—Ä–∞–±–æ—Ç–∞", None),
        (3, "–ó–∞–¥–∞—á–∞ low", "low", None, None, "—Ä–∞–±–æ—Ç–∞", None),
    ]

    message = category_manager.format_tasks_by_category(tasks)

    assert "üî¥" in message  # high priority
    assert "üü°" in message  # medium priority
    assert "üü¢" in message  # low priority


def test_format_tasks_by_category_with_dates(category_manager):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏"""
    tasks = [
        (1, "–ó–∞–¥–∞—á–∞ —Å –¥–∞—Ç–æ–π", "medium", None, "2025-10-25", "—Ä–∞–±–æ—Ç–∞", None),
    ]

    message = category_manager.format_tasks_by_category(tasks)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (25.10)
    assert "25.10" in message


def test_get_categories_list_empty(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–≥–¥–∞ –∏—Ö –Ω–µ—Ç"""
    message = category_manager.get_categories_list(sample_user_id)

    assert "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π" in message


def test_get_categories_list(category_manager, sample_user_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")
    category_manager.get_or_create_category(sample_user_id, "–¥–æ–º")

    message = category_manager.get_categories_list(sample_user_id)

    assert "–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in message
    assert "–†–∞–±–æ—Ç–∞" in message
    assert "–î–æ–º" in message
    assert "üî∑" in message  # —Ä–∞–±–æ—Ç–∞
    assert "üè†" in message  # –¥–æ–º


def test_create_user_category_success(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    result = category_manager.create_user_category(sample_user_id, "–º–æ–π –ø—Ä–æ–µ–∫—Ç", "üéØ")

    assert result is True

    categories = category_manager.db.get_user_categories(sample_user_id)
    assert len(categories) == 1
    assert categories[0][1] == "–º–æ–π –ø—Ä–æ–µ–∫—Ç"
    assert categories[0][2] == "üéØ"


def test_create_user_category_duplicate(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–µ–π—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_manager.create_user_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")
    result = category_manager.create_user_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    assert result is False


def test_create_user_category_default_color(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º"""
    result = category_manager.create_user_category(sample_user_id, "–ø–æ–∫—É–ø–∫–∏")

    assert result is True

    categories = category_manager.db.get_user_categories(sample_user_id)
    # –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–∫–æ–Ω–∫–∞ –∏–∑ default_categories
    assert categories[0][2] == "üõí"


def test_create_user_category_unknown_default_color(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º"""
    result = category_manager.create_user_category(sample_user_id, "–Ω–æ–≤–∞—è_–∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    assert result is True

    categories = category_manager.db.get_user_categories(sample_user_id)
    # –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    assert categories[0][2] == "üìÅ"


def test_get_priority_emoji(category_manager):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    assert category_manager._get_priority_emoji("high") == "üî¥"
    assert category_manager._get_priority_emoji("medium") == "üü°"
    assert category_manager._get_priority_emoji("low") == "üü¢"
    assert category_manager._get_priority_emoji("unknown") == "üü°"  # default


def test_default_categories_exist(category_manager):
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    assert "—Ä–∞–±–æ—Ç–∞" in category_manager.default_categories
    assert "–¥–æ–º" in category_manager.default_categories
    assert "–ª–∏—á–Ω–æ–µ" in category_manager.default_categories
    assert "—É—á–µ–±–∞" in category_manager.default_categories

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏
    assert category_manager.default_categories["—Ä–∞–±–æ—Ç–∞"] == "üî∑"
    assert category_manager.default_categories["–¥–æ–º"] == "üè†"
    assert category_manager.default_categories["–∑–¥–æ—Ä–æ–≤—å–µ"] == "üè•"


def test_user_isolation_categories(category_manager):
    """–¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user1_id = 111
    user2_id = 222

    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    category_manager.get_or_create_category(user1_id, "—Ä–∞–±–æ—Ç–∞")
    category_manager.get_or_create_category(user2_id, "–¥–æ–º")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é
    user1_categories = category_manager.db.get_user_categories(user1_id)
    user2_categories = category_manager.db.get_user_categories(user2_id)

    assert len(user1_categories) == 1
    assert len(user2_categories) == 1
    assert user1_categories[0][1] == "—Ä–∞–±–æ—Ç–∞"
    assert user2_categories[0][1] == "–¥–æ–º"


def test_format_tasks_mixed_categories(category_manager, sample_user_id):
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    category_manager.get_or_create_category(sample_user_id, "—Ä–∞–±–æ—Ç–∞")

    tasks = [
        (1, "–° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π", "high", None, "2025-10-10", "—Ä–∞–±–æ—Ç–∞", None),
        (2, "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "medium", None, None, None, None),
        (3, "–° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π 2", "low", None, None, "—Ä–∞–±–æ—Ç–∞", None),
    ]

    message = category_manager.format_tasks_by_category(tasks)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–µ–∏—Ö —Å–µ–∫—Ü–∏–π
    assert "–†–∞–±–æ—Ç–∞" in message or "—Ä–∞–±–æ—Ç–∞" in message.lower()
    assert "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" in message
    assert "#1" in message
    assert "#2" in message
    assert "#3" in message
